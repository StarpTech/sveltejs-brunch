// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiles file data for bar chart example from svelte site 1`] = `
"/* test.svelte generated by Svelte v3.44.2 */
\\"use strict\\";

const { SvelteComponent, add_render_callback, add_resize_listener, append, append_styles, attr, destroy_each, detach, element, init, insert, noop, safe_not_equal, set_data, space, svg_element, text } = require(\\"svelte/internal\\");
const { scaleLinear } = require(\\"d3-scale\\");

function add_css(target) {
	append_styles(target, \\"svelte-2flq1i\\", \\"h2.svelte-2flq1i.svelte-2flq1i{text-align:center}.chart.svelte-2flq1i.svelte-2flq1i{width:100%;max-width:500px;margin:0 auto}svg.svelte-2flq1i.svelte-2flq1i{position:relative;width:100%;height:200px}.tick.svelte-2flq1i.svelte-2flq1i{font-family:Helvetica, Arial;font-size:.725em;font-weight:200}.tick.svelte-2flq1i line.svelte-2flq1i{stroke:#e2e2e2;stroke-dasharray:2}.tick.svelte-2flq1i text.svelte-2flq1i{fill:#ccc;text-anchor:start}.tick.tick-0.svelte-2flq1i line.svelte-2flq1i{stroke-dasharray:0}.x-axis.svelte-2flq1i .tick text.svelte-2flq1i{text-anchor:middle}.bars.svelte-2flq1i rect.svelte-2flq1i{fill:#a11;stroke:none;opacity:0.65}\\");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	child_ctx[13] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	child_ctx[13] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

// (91:3) {#each yTicks as tick}
function create_each_block_2(ctx) {
	let g;
	let line;
	let text_1;
	let t0_value = /*tick*/ ctx[15] + \\"\\";
	let t0;
	let t1_value = (/*tick*/ ctx[15] === 20 ? ' per 1,000 population' : '') + \\"\\";
	let t1;
	let g_class_value;
	let g_transform_value;

	return {
		c() {
			g = svg_element(\\"g\\");
			line = svg_element(\\"line\\");
			text_1 = svg_element(\\"text\\");
			t0 = text(t0_value);
			t1 = text(t1_value);
			attr(line, \\"x2\\", \\"100%\\");
			attr(line, \\"class\\", \\"svelte-2flq1i\\");
			attr(text_1, \\"y\\", \\"-4\\");
			attr(text_1, \\"class\\", \\"svelte-2flq1i\\");
			attr(g, \\"class\\", g_class_value = \\"tick tick-\\" + /*tick*/ ctx[15] + \\" svelte-2flq1i\\");
			attr(g, \\"transform\\", g_transform_value = \\"translate(0, \\" + (/*yScale*/ ctx[3](/*tick*/ ctx[15]) - /*padding*/ ctx[7].bottom) + \\")\\");
		},
		m(target, anchor) {
			insert(target, g, anchor);
			append(g, line);
			append(g, text_1);
			append(text_1, t0);
			append(text_1, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*yScale*/ 8 && g_transform_value !== (g_transform_value = \\"translate(0, \\" + (/*yScale*/ ctx[3](/*tick*/ ctx[15]) - /*padding*/ ctx[7].bottom) + \\")\\")) {
				attr(g, \\"transform\\", g_transform_value);
			}
		},
		d(detaching) {
			if (detaching) detach(g);
		}
	};
}

// (101:3) {#each points as point, i}
function create_each_block_1(ctx) {
	let g;
	let text_1;

	let t_value = (/*width*/ ctx[0] > 380
	? /*point*/ ctx[11].year
	: formatMobile(/*point*/ ctx[11].year)) + \\"\\";

	let t;
	let text_1_x_value;
	let g_transform_value;

	return {
		c() {
			g = svg_element(\\"g\\");
			text_1 = svg_element(\\"text\\");
			t = text(t_value);
			attr(text_1, \\"x\\", text_1_x_value = /*barWidth*/ ctx[2] / 2);
			attr(text_1, \\"y\\", \\"-4\\");
			attr(text_1, \\"class\\", \\"svelte-2flq1i\\");
			attr(g, \\"class\\", \\"tick svelte-2flq1i\\");
			attr(g, \\"transform\\", g_transform_value = \\"translate(\\" + /*xScale*/ ctx[4](/*i*/ ctx[13]) + \\",\\" + /*height*/ ctx[1] + \\")\\");
		},
		m(target, anchor) {
			insert(target, g, anchor);
			append(g, text_1);
			append(text_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 1 && t_value !== (t_value = (/*width*/ ctx[0] > 380
			? /*point*/ ctx[11].year
			: formatMobile(/*point*/ ctx[11].year)) + \\"\\")) set_data(t, t_value);

			if (dirty & /*barWidth*/ 4 && text_1_x_value !== (text_1_x_value = /*barWidth*/ ctx[2] / 2)) {
				attr(text_1, \\"x\\", text_1_x_value);
			}

			if (dirty & /*xScale, height*/ 18 && g_transform_value !== (g_transform_value = \\"translate(\\" + /*xScale*/ ctx[4](/*i*/ ctx[13]) + \\",\\" + /*height*/ ctx[1] + \\")\\")) {
				attr(g, \\"transform\\", g_transform_value);
			}
		},
		d(detaching) {
			if (detaching) detach(g);
		}
	};
}

// (109:3) {#each points as point, i}
function create_each_block(ctx) {
	let rect;
	let rect_x_value;
	let rect_y_value;
	let rect_width_value;
	let rect_height_value;

	return {
		c() {
			rect = svg_element(\\"rect\\");
			attr(rect, \\"x\\", rect_x_value = /*xScale*/ ctx[4](/*i*/ ctx[13]) + 2);
			attr(rect, \\"y\\", rect_y_value = /*yScale*/ ctx[3](/*point*/ ctx[11].birthrate));
			attr(rect, \\"width\\", rect_width_value = /*barWidth*/ ctx[2] - 4);
			attr(rect, \\"height\\", rect_height_value = /*height*/ ctx[1] - /*padding*/ ctx[7].bottom - /*yScale*/ ctx[3](/*point*/ ctx[11].birthrate));
			attr(rect, \\"class\\", \\"svelte-2flq1i\\");
		},
		m(target, anchor) {
			insert(target, rect, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*xScale*/ 16 && rect_x_value !== (rect_x_value = /*xScale*/ ctx[4](/*i*/ ctx[13]) + 2)) {
				attr(rect, \\"x\\", rect_x_value);
			}

			if (dirty & /*yScale*/ 8 && rect_y_value !== (rect_y_value = /*yScale*/ ctx[3](/*point*/ ctx[11].birthrate))) {
				attr(rect, \\"y\\", rect_y_value);
			}

			if (dirty & /*barWidth*/ 4 && rect_width_value !== (rect_width_value = /*barWidth*/ ctx[2] - 4)) {
				attr(rect, \\"width\\", rect_width_value);
			}

			if (dirty & /*height, yScale*/ 10 && rect_height_value !== (rect_height_value = /*height*/ ctx[1] - /*padding*/ ctx[7].bottom - /*yScale*/ ctx[3](/*point*/ ctx[11].birthrate))) {
				attr(rect, \\"height\\", rect_height_value);
			}
		},
		d(detaching) {
			if (detaching) detach(rect);
		}
	};
}

function create_fragment(ctx) {
	let h2;
	let t1;
	let div;
	let svg;
	let g0;
	let g0_transform_value;
	let g1;
	let g2;
	let div_resize_listener;
	let each_value_2 = /*yTicks*/ ctx[6];
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*points*/ ctx[5];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*points*/ ctx[5];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			h2 = element(\\"h2\\");
			h2.textContent = \\"US birthrate by year\\";
			t1 = space();
			div = element(\\"div\\");
			svg = svg_element(\\"svg\\");
			g0 = svg_element(\\"g\\");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			g1 = svg_element(\\"g\\");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			g2 = svg_element(\\"g\\");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h2, \\"class\\", \\"svelte-2flq1i\\");
			attr(g0, \\"class\\", \\"axis y-axis\\");
			attr(g0, \\"transform\\", g0_transform_value = \\"translate(0,\\" + /*padding*/ ctx[7].top + \\")\\");
			attr(g1, \\"class\\", \\"axis x-axis svelte-2flq1i\\");
			attr(g2, \\"class\\", \\"bars svelte-2flq1i\\");
			attr(svg, \\"class\\", \\"svelte-2flq1i\\");
			attr(div, \\"class\\", \\"chart svelte-2flq1i\\");
			add_render_callback(() => /*div_elementresize_handler*/ ctx[9].call(div));
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			append(div, svg);
			append(svg, g0);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(g0, null);
			}

			append(svg, g1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(g1, null);
			}

			append(svg, g2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(g2, null);
			}

			div_resize_listener = add_resize_listener(div, /*div_elementresize_handler*/ ctx[9].bind(div));
		},
		p(ctx, [dirty]) {
			if (dirty & /*yTicks, yScale, padding*/ 200) {
				each_value_2 = /*yTicks*/ ctx[6];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(g0, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty & /*xScale, height, barWidth, width, points, formatMobile*/ 55) {
				each_value_1 = /*points*/ ctx[5];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(g1, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*xScale, yScale, points, barWidth, height, padding*/ 190) {
				each_value = /*points*/ ctx[5];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(g2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h2);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			div_resize_listener();
		}
	};
}

function formatMobile(tick) {
	return \\"'\\" + tick % 100;
}

function instance($$self, $$props, $$invalidate) {
	let xScale;
	let yScale;
	let innerWidth;
	let barWidth;

	const points = [
		{ year: 1990, birthrate: 16.7 },
		{ year: 1995, birthrate: 14.6 },
		{ year: 2000, birthrate: 14.4 },
		{ year: 2005, birthrate: 14 },
		{ year: 2010, birthrate: 13 },
		{ year: 2015, birthrate: 12.4 }
	];

	const xTicks = [1990, 1995, 2000, 2005, 2010, 2015];
	const yTicks = [0, 5, 10, 15, 20];
	const padding = { top: 20, right: 15, bottom: 20, left: 25 };
	let width = 500;
	let height = 200;

	function div_elementresize_handler() {
		width = this.clientWidth;
		height = this.clientHeight;
		$$invalidate(0, width);
		$$invalidate(1, height);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*width*/ 1) {
			$: $$invalidate(4, xScale = scaleLinear().domain([0, xTicks.length]).range([padding.left, width - padding.right]));
		}

		if ($$self.$$.dirty & /*height*/ 2) {
			$: $$invalidate(3, yScale = scaleLinear().domain([0, Math.max.apply(null, yTicks)]).range([height - padding.bottom, padding.top]));
		}

		if ($$self.$$.dirty & /*width*/ 1) {
			$: $$invalidate(8, innerWidth = width - (padding.left + padding.right));
		}

		if ($$self.$$.dirty & /*innerWidth*/ 256) {
			$: $$invalidate(2, barWidth = innerWidth / xTicks.length);
		}
	};

	return [
		width,
		height,
		barWidth,
		yScale,
		xScale,
		points,
		yTicks,
		padding,
		innerWidth,
		div_elementresize_handler
	];
}

class Test extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {}, add_css);
	}
}

exports.default = Test;"
`;
