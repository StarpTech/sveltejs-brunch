// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiles file data for bar chart example from svelte site 1`] = `
"/* test.svelte generated by Svelte v3.4.4 */
\\"use strict\\";

const {
	SvelteComponent,
	add_render_callback,
	add_resize_listener,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	svg_element,
	text
} = require(\\"svelte/internal\\");

const { scaleLinear } = require(\\"d3-scale\\");

function add_css() {
	var style = element(\\"style\\");
	style.id = 'svelte-2flq1i-style';
	style.textContent = \\"h2.svelte-2flq1i{text-align:center}.chart.svelte-2flq1i{width:100%;max-width:500px;margin:0 auto}svg.svelte-2flq1i{position:relative;width:100%;height:200px}.tick.svelte-2flq1i{font-family:Helvetica, Arial;font-size:.725em;font-weight:200}.tick.svelte-2flq1i line.svelte-2flq1i{stroke:#e2e2e2;stroke-dasharray:2}.tick.svelte-2flq1i text.svelte-2flq1i{fill:#ccc;text-anchor:start}.tick.tick-0.svelte-2flq1i line.svelte-2flq1i{stroke-dasharray:0}.x-axis.svelte-2flq1i .tick text.svelte-2flq1i{text-anchor:middle}.bars.svelte-2flq1i rect.svelte-2flq1i{fill:#a11;stroke:none;opacity:0.65}\\";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.point = list[i];
	child_ctx.i = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.point = list[i];
	child_ctx.i = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.tick = list[i];
	return child_ctx;
}

// (91:3) {#each yTicks as tick}
function create_each_block_2(ctx) {
	var g, line, text_1, t0_value = ctx.tick, t0, t1_value = ctx.tick === 20 ? ' per 1,000 population' : '', t1, g_class_value, g_transform_value;

	return {
		c() {
			g = svg_element(\\"g\\");
			line = svg_element(\\"line\\");
			text_1 = svg_element(\\"text\\");
			t0 = text(t0_value);
			t1 = text(t1_value);
			attr(line, \\"x2\\", \\"100%\\");
			attr(line, \\"class\\", \\"svelte-2flq1i\\");
			attr(text_1, \\"y\\", \\"-4\\");
			attr(text_1, \\"class\\", \\"svelte-2flq1i\\");
			attr(g, \\"class\\", g_class_value = \\"tick tick-\\" + ctx.tick + \\" svelte-2flq1i\\");
			attr(g, \\"transform\\", g_transform_value = \\"translate(0, \\" + (ctx.yScale(ctx.tick) - ctx.padding.bottom) + \\")\\");
		},

		m(target, anchor) {
			insert(target, g, anchor);
			append(g, line);
			append(g, text_1);
			append(text_1, t0);
			append(text_1, t1);
		},

		p(changed, ctx) {
			if ((changed.yScale) && g_transform_value !== (g_transform_value = \\"translate(0, \\" + (ctx.yScale(ctx.tick) - ctx.padding.bottom) + \\")\\")) {
				attr(g, \\"transform\\", g_transform_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(g);
			}
		}
	};
}

// (101:3) {#each points as point, i}
function create_each_block_1(ctx) {
	var g, text_1, t_value = ctx.width > 380 ? ctx.point.year : formatMobile(ctx.point.year), t, text_1_x_value, g_transform_value;

	return {
		c() {
			g = svg_element(\\"g\\");
			text_1 = svg_element(\\"text\\");
			t = text(t_value);
			attr(text_1, \\"x\\", text_1_x_value = ctx.barWidth/2);
			attr(text_1, \\"y\\", \\"-4\\");
			attr(text_1, \\"class\\", \\"svelte-2flq1i\\");
			attr(g, \\"class\\", \\"tick svelte-2flq1i\\");
			attr(g, \\"transform\\", g_transform_value = \\"translate(\\" + ctx.xScale(ctx.i) + \\",\\" + ctx.height + \\")\\");
		},

		m(target, anchor) {
			insert(target, g, anchor);
			append(g, text_1);
			append(text_1, t);
		},

		p(changed, ctx) {
			if ((changed.width) && t_value !== (t_value = ctx.width > 380 ? ctx.point.year : formatMobile(ctx.point.year))) {
				set_data(t, t_value);
			}

			if ((changed.barWidth) && text_1_x_value !== (text_1_x_value = ctx.barWidth/2)) {
				attr(text_1, \\"x\\", text_1_x_value);
			}

			if ((changed.xScale || changed.height) && g_transform_value !== (g_transform_value = \\"translate(\\" + ctx.xScale(ctx.i) + \\",\\" + ctx.height + \\")\\")) {
				attr(g, \\"transform\\", g_transform_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(g);
			}
		}
	};
}

// (109:3) {#each points as point, i}
function create_each_block(ctx) {
	var rect, rect_x_value, rect_y_value, rect_width_value, rect_height_value;

	return {
		c() {
			rect = svg_element(\\"rect\\");
			attr(rect, \\"x\\", rect_x_value = ctx.xScale(ctx.i) + 2);
			attr(rect, \\"y\\", rect_y_value = ctx.yScale(ctx.point.birthrate));
			attr(rect, \\"width\\", rect_width_value = ctx.barWidth - 4);
			attr(rect, \\"height\\", rect_height_value = ctx.height - ctx.padding.bottom - ctx.yScale(ctx.point.birthrate));
			attr(rect, \\"class\\", \\"svelte-2flq1i\\");
		},

		m(target, anchor) {
			insert(target, rect, anchor);
		},

		p(changed, ctx) {
			if ((changed.xScale) && rect_x_value !== (rect_x_value = ctx.xScale(ctx.i) + 2)) {
				attr(rect, \\"x\\", rect_x_value);
			}

			if ((changed.yScale) && rect_y_value !== (rect_y_value = ctx.yScale(ctx.point.birthrate))) {
				attr(rect, \\"y\\", rect_y_value);
			}

			if ((changed.barWidth) && rect_width_value !== (rect_width_value = ctx.barWidth - 4)) {
				attr(rect, \\"width\\", rect_width_value);
			}

			if ((changed.height || changed.yScale) && rect_height_value !== (rect_height_value = ctx.height - ctx.padding.bottom - ctx.yScale(ctx.point.birthrate))) {
				attr(rect, \\"height\\", rect_height_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(rect);
			}
		}
	};
}

function create_fragment(ctx) {
	var h2, t_1, div, svg, g0, g0_transform_value, g1, g2, div_resize_listener;

	var each_value_2 = ctx.yTicks;

	var each_blocks_2 = [];

	for (var i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	var each_value_1 = ctx.points;

	var each_blocks_1 = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	var each_value = ctx.points;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			h2 = element(\\"h2\\");
			h2.textContent = \\"US birthrate by year\\";
			t_1 = space();
			div = element(\\"div\\");
			svg = svg_element(\\"svg\\");
			g0 = svg_element(\\"g\\");

			for (var i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			g1 = svg_element(\\"g\\");

			for (var i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			g2 = svg_element(\\"g\\");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			h2.className = \\"svelte-2flq1i\\";
			attr(g0, \\"class\\", \\"axis y-axis\\");
			attr(g0, \\"transform\\", g0_transform_value = \\"translate(0,\\" + ctx.padding.top + \\")\\");
			attr(g1, \\"class\\", \\"axis x-axis svelte-2flq1i\\");
			attr(g2, \\"class\\", \\"bars svelte-2flq1i\\");
			attr(svg, \\"class\\", \\"svelte-2flq1i\\");
			add_render_callback(() => ctx.div_resize_handler.call(div));
			div.className = \\"chart svelte-2flq1i\\";
		},

		m(target, anchor) {
			insert(target, h2, anchor);
			insert(target, t_1, anchor);
			insert(target, div, anchor);
			append(div, svg);
			append(svg, g0);

			for (var i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(g0, null);
			}

			append(svg, g1);

			for (var i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(g1, null);
			}

			append(svg, g2);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(g2, null);
			}

			div_resize_listener = add_resize_listener(div, ctx.div_resize_handler.bind(div));
		},

		p(changed, ctx) {
			if (changed.yTicks || changed.yScale || changed.padding) {
				each_value_2 = ctx.yTicks;

				for (var i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(changed, child_ctx);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(g0, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}
				each_blocks_2.length = each_value_2.length;
			}

			if (changed.xScale || changed.height || changed.barWidth || changed.width || changed.points || changed.formatMobile) {
				each_value_1 = ctx.points;

				for (var i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(changed, child_ctx);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(g1, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}
				each_blocks_1.length = each_value_1.length;
			}

			if (changed.xScale || changed.yScale || changed.points || changed.barWidth || changed.height || changed.padding) {
				each_value = ctx.points;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(g2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h2);
				detach(t_1);
				detach(div);
			}

			destroy_each(each_blocks_2, detaching);

			destroy_each(each_blocks_1, detaching);

			destroy_each(each_blocks, detaching);

			div_resize_listener.cancel();
		}
	};
}

function formatMobile(tick) {
	return \\"'\\" + tick % 100;
}

function instance($$self, $$props, $$invalidate) {
	const points = [
		{ year: 1990, birthrate: 16.7 },
		{ year: 1995, birthrate: 14.6 },
		{ year: 2000, birthrate: 14.4 },
		{ year: 2005, birthrate: 14 },
		{ year: 2010, birthrate: 13 },
		{ year: 2015, birthrate: 12.4 }
	];

	const xTicks = [1990, 1995, 2000, 2005, 2010, 2015];
	const yTicks = [0, 5, 10, 15, 20];
	const padding = { top: 20, right: 15, bottom: 20, left: 25 };

	let width = 500;
	let height = 200;

	function div_resize_handler() {
		width = this.clientWidth;
		height = this.clientHeight;
		$$invalidate('width', width);
		$$invalidate('height', height);
	}

	let xScale, yScale, innerWidth, barWidth;

	$$self.$$.update = ($$dirty = { width: 1, height: 1, innerWidth: 1 }) => {
		if ($$dirty.width) { $$invalidate('xScale', xScale = scaleLinear()
				.domain([0, xTicks.length])
				.range([padding.left, width - padding.right])); }
		if ($$dirty.height) { $$invalidate('yScale', yScale = scaleLinear()
				.domain([0, Math.max.apply(null, yTicks)])
				.range([height - padding.bottom, padding.top])); }
		if ($$dirty.width) { $$invalidate('innerWidth', innerWidth = width - (padding.left + padding.right)); }
		if ($$dirty.innerWidth) { $$invalidate('barWidth', barWidth = innerWidth / xTicks.length); }
	};

	return {
		points,
		yTicks,
		padding,
		width,
		height,
		xScale,
		yScale,
		barWidth,
		div_resize_handler
	};
}

class Test extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById(\\"svelte-2flq1i-style\\")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

exports.default = Test;"
`;
